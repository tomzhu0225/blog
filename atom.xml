<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://tomzhu0225.github.io</id>
    <title>FUSION!</title>
    <updated>2022-03-19T12:04:11.232Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://tomzhu0225.github.io"/>
    <link rel="self" href="https://tomzhu0225.github.io/atom.xml"/>
    <subtitle>我叫朱博文，一个有奇思妙想的学生</subtitle>
    <logo>https://tomzhu0225.github.io/images/avatar.png</logo>
    <icon>https://tomzhu0225.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, FUSION!</rights>
    <entry>
        <title type="html"><![CDATA[用ISM方法研究课程支持关系]]></title>
        <id>https://tomzhu0225.github.io/post/yong-ism-fang-fa-yan-jiu-ke-cheng-zhi-chi-guan-xi/</id>
        <link href="https://tomzhu0225.github.io/post/yong-ism-fang-fa-yan-jiu-ke-cheng-zhi-chi-guan-xi/">
        </link>
        <updated>2022-03-19T12:03:13.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://tomzhu0225.github.io/post-images/1647691422969.jpg" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1647691429061.jpg" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1647691433418.jpg" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1647691437299.jpg" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[氢原子薛定谔方程的解析解]]></title>
        <id>https://tomzhu0225.github.io/post/qing-yuan-zi-xie-ding-e-fang-cheng-de-jie-xi-jie/</id>
        <link href="https://tomzhu0225.github.io/post/qing-yuan-zi-xie-ding-e-fang-cheng-de-jie-xi-jie/">
        </link>
        <updated>2022-01-15T01:20:18.000Z</updated>
        <summary type="html"><![CDATA[<p>Solving Schrödinger’s equation for the hydrogen atom；当我写完这篇作业之后我对量子系统的求解还是充满信心的——难道求解其他多体问题和求解氢原子中电子的薛定谔方程会有什么不同吗？只是多了一点点计算量罢了。但是实际上求解铁原子中一个电子的薛定谔方程，仅仅储存该薛定谔方程就需要整个太阳系的原子，更不要说求解了。还好有DFT理论......</p>
]]></summary>
        <content type="html"><![CDATA[<p>Solving Schrödinger’s equation for the hydrogen atom；当我写完这篇作业之后我对量子系统的求解还是充满信心的——难道求解其他多体问题和求解氢原子中电子的薛定谔方程会有什么不同吗？只是多了一点点计算量罢了。但是实际上求解铁原子中一个电子的薛定谔方程，仅仅储存该薛定谔方程就需要整个太阳系的原子，更不要说求解了。还好有DFT理论......</p>
<!-- more -->
<p><img src="https://tomzhu0225.github.io/post-images/1642209670092.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1642209677872.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1642209682808.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1642209690802.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1642209697617.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1642209702450.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1642209707588.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1642209712317.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1642209719281.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1642209724506.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1642209729360.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1642209735621.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[磁控法测量电子荷质比中电场力引起的误差分析]]></title>
        <id>https://tomzhu0225.github.io/post/ci-kong-fa-ce-liang-dian-zi-he-zhi-bi-zhong-dian-chang-li-yin-qi-de-wu-chai-fen-xi/</id>
        <link href="https://tomzhu0225.github.io/post/ci-kong-fa-ce-liang-dian-zi-he-zhi-bi-zhong-dian-chang-li-yin-qi-de-wu-chai-fen-xi/">
        </link>
        <updated>2022-01-12T12:08:14.000Z</updated>
        <summary type="html"><![CDATA[<p>这篇文章中所提到的发现是真正的发现——没人涉足过的地方。但是嘛，时间和资源、能力限制没有办法来继续探究了</p>
]]></summary>
        <content type="html"><![CDATA[<p>这篇文章中所提到的发现是真正的发现——没人涉足过的地方。但是嘛，时间和资源、能力限制没有办法来继续探究了</p>
<!-- more -->
<p><img src="https://tomzhu0225.github.io/post-images/1641989355852.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1641989397427.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1641989401757.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1641989406280.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[一个看似不可能的现象-翼型螺帽的规则翻转]]></title>
        <id>https://tomzhu0225.github.io/post/yi-ge-kan-si-bu-ke-neng-de-xian-xiang-yi-xing-luo-mao-de-gui-ze-fan-zhuan/</id>
        <link href="https://tomzhu0225.github.io/post/yi-ge-kan-si-bu-ke-neng-de-xian-xiang-yi-xing-luo-mao-de-gui-ze-fan-zhuan/">
        </link>
        <updated>2022-01-12T11:50:48.000Z</updated>
        <summary type="html"><![CDATA[<p>该论文是理论力学课程的结课论文。说一些论文中没有写到的事情吧：这篇论文在最后仿真部分结尾十分仓促，那部分可以写得更好的，那里完全就是改都不带改的把别人写好的代码拿来用，真该看看人家代码是怎么实现的动画过程，不过嘛，现在代码论文均在我手里到时候要用的时候就来研究喽。</p>
]]></summary>
        <content type="html"><![CDATA[<p>该论文是理论力学课程的结课论文。说一些论文中没有写到的事情吧：这篇论文在最后仿真部分结尾十分仓促，那部分可以写得更好的，那里完全就是改都不带改的把别人写好的代码拿来用，真该看看人家代码是怎么实现的动画过程，不过嘛，现在代码论文均在我手里到时候要用的时候就来研究喽。</p>
<!-- more -->
<p><img src="https://tomzhu0225.github.io/post-images/1641988902089.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1641988908881.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1641988913893.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1641988920781.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1641988925922.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1641988931065.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1641988937070.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1641988943238.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1641988947990.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1641988952555.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1641988958087.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[伽罗瓦第一论文（代数方程有代数解的充分必要条件）]]></title>
        <id>https://tomzhu0225.github.io/post/jia-luo-wa-di-yi-lun-wen-dai-shu-fang-cheng-you-dai-shu-jie-de-chong-fen-bi-yao-tiao-jian/</id>
        <link href="https://tomzhu0225.github.io/post/jia-luo-wa-di-yi-lun-wen-dai-shu-fang-cheng-you-dai-shu-jie-de-chong-fen-bi-yao-tiao-jian/">
        </link>
        <updated>2022-01-12T02:37:45.000Z</updated>
        <summary type="html"><![CDATA[<p>近日写过最高深的内容，这篇本质上是写给我自己看的，大家能理解多少看自己造化了（定理和引理之间的逻辑链条我可以理解，但是少了不少定理背后的证明总觉得食之无味.）</p>
]]></summary>
        <content type="html"><![CDATA[<p>近日写过最高深的内容，这篇本质上是写给我自己看的，大家能理解多少看自己造化了（定理和引理之间的逻辑链条我可以理解，但是少了不少定理背后的证明总觉得食之无味.）</p>
<!-- more -->
<p><img src="https://tomzhu0225.github.io/post-images/1641955245017.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1641955251977.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1641955258307.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1641955264013.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1641955269269.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1641955273558.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1641955277692.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1641955283106.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1641955288449.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1641955294800.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1641955300351.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1641955305367.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ZEEKR主动空气动力学系统（ZAAS）]]></title>
        <id>https://tomzhu0225.github.io/post/zeekr-zhu-dong-kong-qi-dong-li-xue-xi-tong-zaas/</id>
        <link href="https://tomzhu0225.github.io/post/zeekr-zhu-dong-kong-qi-dong-li-xue-xi-tong-zaas/">
        </link>
        <updated>2021-10-12T12:46:02.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://tomzhu0225.github.io/post-images/1634042798966.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1634042807084.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1634042816543.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1634042824929.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1634042833591.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1634042840916.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[基于Ansys软件的液滴碰撞固体及液体表面的铺展特性研究（xjtu数学建模大赛选拔赛题目）]]></title>
        <id>https://tomzhu0225.github.io/post/ji-yu-ansys-ruan-jian-de-ye-di-peng-zhuang-gu-ti-ji-ye-ti-biao-mian-de-pu-zhan-te-xing-yan-jiu-xjtu-shu-xue-jian-mo-da-sai-xuan-ba-sai-ti-mu/</id>
        <link href="https://tomzhu0225.github.io/post/ji-yu-ansys-ruan-jian-de-ye-di-peng-zhuang-gu-ti-ji-ye-ti-biao-mian-de-pu-zhan-te-xing-yan-jiu-xjtu-shu-xue-jian-mo-da-sai-xuan-ba-sai-ti-mu/">
        </link>
        <updated>2021-07-29T00:33:47.000Z</updated>
        <summary type="html"><![CDATA[<p>感谢黄智恒与朱昊宁贡献了该论文的理论部分（也就是主题部分），没有他们就不会有今天这篇完备的数学论文。我主要对水滴在固体壁面和液体表面的铺展进行了数值模拟。</p>
]]></summary>
        <content type="html"><![CDATA[<p>感谢黄智恒与朱昊宁贡献了该论文的理论部分（也就是主题部分），没有他们就不会有今天这篇完备的数学论文。我主要对水滴在固体壁面和液体表面的铺展进行了数值模拟。</p>
<!-- more -->
<p><img src="https://tomzhu0225.github.io/post-images/1627519135458.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1627519140342.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1627519144657.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1627519149329.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1627519153756.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1627519157885.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1627519162338.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1627519168066.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1627519173164.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1627519178048.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1627519183177.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1627519188902.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1627519193355.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1627519197950.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1627519203607.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1627519208400.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1627519212945.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1627519218752.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1627519241455.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1627519249902.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ESPBOY-Arduboy on ESP-12E]]></title>
        <id>https://tomzhu0225.github.io/post/espboy-arduboy-on-esp-12e/</id>
        <link href="https://tomzhu0225.github.io/post/espboy-arduboy-on-esp-12e/">
        </link>
        <updated>2021-07-27T00:28:08.000Z</updated>
        <summary type="html"><![CDATA[<p>hand held gaming console based on ESP-12E!</p>
]]></summary>
        <content type="html"><![CDATA[<p>hand held gaming console based on ESP-12E!</p>
<!-- more -->
<p><img src="https://tomzhu0225.github.io/post-images/1627345922682.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1627345929995.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1627345935855.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1627345942001.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1627345947693.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1627345953428.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1627345959844.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1627345967300.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1627345973679.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1627345980730.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1627345987545.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1627345993830.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1627346000442.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Using the XY mode of oscilloscope to draw graphs]]></title>
        <id>https://tomzhu0225.github.io/post/using-the-xy-mode-of-oscilloscope-to-draw-graphs/</id>
        <link href="https://tomzhu0225.github.io/post/using-the-xy-mode-of-oscilloscope-to-draw-graphs/">
        </link>
        <updated>2021-07-05T06:17:26.000Z</updated>
        <summary type="html"><![CDATA[<p>尝试学术论文第一作（直接劝退），虽然在原理上没有什么创新，但是我还是要说这是工程师的浪漫。论文在之前写的中文版的基础上深化探索了许多要素，最后总结了影响图像质量的理论公式。</p>
]]></summary>
        <content type="html"><![CDATA[<p>尝试学术论文第一作（直接劝退），虽然在原理上没有什么创新，但是我还是要说这是工程师的浪漫。论文在之前写的中文版的基础上深化探索了许多要素，最后总结了影响图像质量的理论公式。</p>
<!-- more -->
<p><img src="https://tomzhu0225.github.io/post-images/1625465889329.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1625465908166.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1625465918937.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1625465928245.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1625465935849.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1625465943135.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1625465949942.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1625465958540.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1625465965363.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1625465972179.png" alt="" loading="lazy"><br>
<img src="https://tomzhu0225.github.io/post-images/1625465978388.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ associated code for Use the XY mode of oscilloscope to draw graphs with audio signals]]></title>
        <id>https://tomzhu0225.github.io/post/associated-code-for-use-the-xy-mode-of-oscilloscope-to-draw-graphs-with-audio-signals/</id>
        <link href="https://tomzhu0225.github.io/post/associated-code-for-use-the-xy-mode-of-oscilloscope-to-draw-graphs-with-audio-signals/">
        </link>
        <updated>2021-06-13T04:09:37.000Z</updated>
        <content type="html"><![CDATA[<p>picture processing</p>
<pre><code>'''
MIT License

Copyright (c) 1998-2021 RIGOL co.,ltd.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the &quot;Software&quot;), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

Vector WaveForm Converter 
Based On Python,OpenCV,Numpy
Powered By Dave Xue 

'''

import cv2 as cv
import numpy as np
from numpy.core.defchararray import count
from numpy.lib.function_base import append

#Target Video Path and Name
videoPaths = r&quot;C:\Users\tomkeen\Desktop\physicswriting\bapiece.mp4&quot;
#Images Output Path
imgPaths = &quot;mc2.img&quot;
#Quantity Of Points Per Frame
ptsPerFrame = 10
#Prefix Of File Name Of WaveForm Output
fileName = &quot;nonWFM&quot;

imgShape = []
xData = []
yData = []
FrameCountEnd = 0
FrameCountStart = 1

#Converd Video To Images
def v2p(videoPath, imgPath):
   global FrameCountAll
   videoObj = cv.VideoCapture(videoPath)
   frameCount = 1
   saveCountDown = 1
   saveCount = 0

   if videoObj.isOpened():
       rval, frame = videoObj.read()
       FrameCountAll = videoObj.get(cv.CAP_PROP_FRAME_COUNT)
   else:
       print(&quot;Video Err&quot;)
       rval = False
   
   while rval:
       rval, frame = videoObj.read()
       if (not rval):
           break
       if (frameCount % saveCountDown == 0):
           saveCount += 1
           print(&quot;NOW Frame is &quot; + str(saveCount) + &quot; Of All Frame &quot; +
            str(FrameCountAll) + &quot; &quot; + str(100*(saveCount/FrameCountAll)) + &quot; % &quot;,end='\r' )
           cv.imwrite(imgPath+str(saveCount)+&quot;.jpg&quot;, frame)
       frameCount += 1
       cv.waitKey(1)
   videoObj.release()


#Use OpenCV To Find Contours In Each Frame
def contours(image):
   dst = cv.GaussianBlur(image, (3, 3), 0) #Use Gaussian Blur To Against Noises
   gray = cv.cvtColor(dst, cv.COLOR_RGB2GRAY)
   ret, binary = cv.threshold(gray, 0, 255, cv.THRESH_BINARY | cv.THRESH_OTSU) #Binaryzation The Image By OSTU
   c_canny_img  = cv.Canny(gray,10,150)#Use Canny Algorithm To Find Edges
   cv.imshow(&quot;canny image&quot;, c_canny_img)
   contours, heriachy = cv.findContours(c_canny_img, cv.RETR_LIST, cv.CHAIN_APPROX_NONE)#Get Contours
   print(&quot;Find &quot;+str(np.size(contours))+&quot; Contours&quot;,end = '')
   cv.drawContours(image, contours, -1, (0, 0, 255), 2)
   cv.imshow(&quot;COU&quot;,image)
   cv.waitKey(2)
   return contours


#Write Points Into Buffer
def write2data(ptsList):
   global xData,yData
   ptsCount = 0
   ptsloop = 0
   xTmp = []
   yTmp = []
   for pts in ptsList:
       pts = np.transpose([pts]).tolist()
       for ptC in range(0,np.size(pts[0][0])-1): 
           xTmp.append(int(((pts[0][0][ptC][0]/(imgShape[1]/2))-1.0)*65535))
           yTmp.append(int(((pts[1][0][ptC][0]/(imgShape[0]/2))-1.0)*65535))
           ptsCount += 1
   if (ptsCount &lt; ptsPerFrame and ptsCount &gt; 0):
       ptsloop = int(ptsPerFrame/ptsCount)
       ptsCount = (ptsPerFrame-(ptsloop*ptsCount))
       for i in range(0,ptsloop+1):
           xData += xTmp
           yData += yTmp
   elif(ptsCount &gt;= ptsPerFrame and ptsCount &gt; 0):
       xData += xTmp
       yData += yTmp
   else:
       xData.append(0)
       yData.append(0)
   print(&quot;pts: &quot;+str(ptsCount*ptsloop))


#Config File Names
def contoursAll(imgsPath,filaName):
   global imgShape,FrameCountAll,ptL
   for i in range(int(FrameCountStart),int(FrameCountEnd)):
       ipath = imgsPath+str(i)+&quot;.jpg&quot;
       src = cv.imread(ipath)
       imgShape = src.shape
       ptL = contours(src)
       write2data(ptL)
   xFile = open(filaName+'zheshizhendx.txt', 'a', newline='')
   yFile = open(filaName+'zheshizhendy.txt', 'a', newline='')
   
   for i in range(np.size(xData)-1):
       xFile.writelines(str(xData[i])+'\n')
       yFile.writelines(str(yData[i])+'\n')
   
   xFile.close()
   yFile.close()
   


if __name__ == &quot;__main__&quot;:
   print(&quot;Input Frame Num To Start From Images Or 'c' From Video&quot;)
   frame = input()
   if (frame != 'c'):
       FrameCountStart = int(frame)
       print(&quot;Input The End  Of Frames&quot;)
       FrameTotal = int(input())
   else:       
       v2p(videoPaths, imgPaths)
   FrameCountEnd = FrameTotal
   contoursAll(imgPaths, fileName)
   
</code></pre>
]]></content>
    </entry>
</feed>